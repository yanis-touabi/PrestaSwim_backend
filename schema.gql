# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

"""ServiceProvider"""
type ServiceProvider {
  id: Float!
  specialty: String
  bio: String
  hourlyRate: Float
  notes: String
  availability: Boolean!
  userId: Float!
}

"""Professional"""
type Professional {
  id: Float!
  currentPosition: String!
  contactEmail: String!
  contactPhone: String!
  workingAt: String!
  experienceYears: Float
  industry: String
  linkedinProfile: String
  accountantEmail: String!
  userId: Float!
}

"""Address"""
type Address {
  id: Float!
  addressLine1: String!
  addressLine2: String
  city: String!
  commune: String!
  country: String!
  postalCode: String
  latitude: Float
  longitude: Float
}

"""User"""
type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
  isLoggedIn: Boolean!
  login: Boolean!
  birthDate: DateTime
  role: Role!
  gender: Gender
  phoneNumber: String
  addressId: Float
  accountStatus: AccountStatus!
  verificationCode: String
  isVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  address: Address
  serviceProvider: ServiceProvider
  professional: Professional
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Roles available for the user"""
enum Role {
  PROVIDER
  PROFESSIONAL
  ADMIN
}

"""Gender of the user"""
enum Gender {
  MALE
  FEMALE
  OTHER
}

"""Account status of the user"""
enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type AuthResponse {
  data: User!
  accessToken: String!
  refreshToken: String!
  tokenId: String!
  accessTokenExpires: String!
}

"""User with relations"""
type UserWithRelations {
  user: User!
  address: Address
  serviceProvider: ServiceProvider
  professional: Professional
}

type BooleanResponse {
  status: Float!
  message: String!
  success: Boolean!
  expireToken: String
}

"""Service Provider User Details"""
type ServiceProviderUserDetails {
  userId: Float!
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
  isLoggedIn: Boolean!
  login: Boolean!
  birthDate: String
  role: String!
  gender: String
  phoneNumber: String
  accountStatus: String!
  verificationCode: String
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  serviceProviderId: Float!
  specialty: String
  bio: String
  hourlyRate: Float
  notes: String
  availability: Boolean!
  addressId: Float
  addressLine1: String
  addressLine2: String
  city: String
  commune: String
  postalCode: String
  country: String
  latitude: Float
  longitude: Float
}

"""Professional User Details"""
type ProfessionalUserDetails {
  userId: Float!
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
  isLoggedIn: Boolean!
  login: Boolean!
  birthDate: String
  role: String!
  gender: String
  phoneNumber: String
  accountStatus: String!
  verificationCode: String
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  professionalId: Float!
  currentPosition: String!
  contactEmail: String!
  contactPhone: String!
  workingAt: String!
  experienceYears: Float
  industry: String
  linkedinProfile: String
  accountantEmail: String!
  addressId: Float
  addressLine1: String
  addressLine2: String
  city: String
  commune: String
  postalCode: String
  country: String
  latitude: Float
  longitude: Float
}

type Pool {
  id: Int!
  professionalId: Int!
  companyName: String
  poolName: String!
  poolDescription: String
  poolAddressId: Int!
  professional: Professional!
  poolAddress: Address!
}

type Query {
  emptyQuery: String
  getMe: User!
  getUserById(userId: String!): User!
  getServiceProviderUserDetailsById(userId: Int!): ServiceProviderUserDetails!
  getProfessionalUserDetailsById(userId: Int!): ProfessionalUserDetails!
  getAllUser: [User!]!
  getAllServiceProviders: [User!]!
  getAllProfessionals: [User!]!
  getMyProfessionalAccountDetails: [ProfessionalUserDetails!]
  getMyServiceProviderAccountDetails: [ServiceProviderUserDetails!]
  getAllPools: [Pool!]!
  getPoolById(id: Float!): Pool
  getProfessionalPools: [Pool!]!
}

type Mutation {
  signUp(signUpInput: SignUpDto!, avatar: Upload): User!
  signUpServiceProvider(signUpInput: SignUpServiceProviderDto!, avatar: Upload): UserWithRelations!
  signUpProfessional(signUpInput: SignUpProfessionalDto!, avatar: Upload): UserWithRelations!
  signIn(signInInput: SignInDto!): AuthResponse!
  logout(userId: Float!): BooleanResponse!
  resetPassword(resetPasswordInput: ResetPasswordDto!): BooleanResponse!
  verifyCode(verifyCodeInput: VerifyCodeDto!): BooleanResponse!
  changePassword(changePasswordInput: ChangePasswordDto!): BooleanResponse!
  updateUser(updateUserInput: UpdateUserDto!): User!
  updateUserAddress(addressData: AddressDto!): User!
  deactivateAccount: BooleanResponse!
  updateAvatar(avatar: Upload): User!
  updatePassword(updatePasswordInput: UpdatePasswordDto!): BooleanResponse!
  banUser(userId: String!): BooleanResponse!
  updateProfessionalInfo(updateUserInput: UpdateProfessionalDto!): Professional!
  updateServiceProviderInfo(updateUserInput: UpdateServiceProviderDto!): ServiceProvider!
  createPool(input: CreatePoolDto!): Pool!
  updatePool(id: Float!, input: UpdatePoolDto!): Pool!
  deletePool(id: Float!): Pool!
}

input SignUpDto {
  firstName: String!
  lastName: String!
  birthDate: DateTime
  gender: Gender!
  role: Role!
  accountStatus: AccountStatus!
  phoneNumber: String
  email: String!
  password: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input SignUpServiceProviderDto {
  userDetails: SignUpDto!
  addressDetails: AddressDto!
  serviceProviderDetails: ServiceProviderDetailsDto!
}

input AddressDto {
  addressLine1: String!
  addressLine2: String
  city: String!
  commune: String!
  postalCode: String
  country: String!
  latitude: Float
  longitude: Float
}

input ServiceProviderDetailsDto {
  specialty: String!
  bio: String
  hourlyRate: Float
  notes: String
  availability: Boolean!
}

input SignUpProfessionalDto {
  userDetails: SignUpDto!
  addressDetails: AddressDto!
  professionalDetails: ProfessionalDetailsDto!
}

input ProfessionalDetailsDto {
  currentPosition: String!
  contactEmail: String!
  contactPhone: String!
  workingAt: String!
  experienceYears: Float
  industry: String
  linkedinProfile: String
  accountantEmail: String!
}

input SignInDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  email: String!
}

input VerifyCodeDto {
  email: String!
  code: String!
}

input ChangePasswordDto {
  password: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  phoneNumber: String
  birthDate: DateTime
  gender: Gender
  email: String
}

input UpdatePasswordDto {
  currentPassword: String!
  newPassword: String!
}

input UpdateProfessionalDto {
  currentPosition: String
  contactEmail: String
  contactPhone: String
  workingAt: String
  experienceYears: Float
  industry: String
  linkedinProfile: String
  accountantEmail: String
}

input UpdateServiceProviderDto {
  specialty: String
  bio: String
  hourlyRate: Float
  notes: String
  availability: Boolean
}

input CreatePoolDto {
  poolName: String!
  companyName: String
  poolDescription: String
  poolAddressId: Float!
}

input UpdatePoolDto {
  poolName: String
  companyName: String
  poolDescription: String
  poolAddressId: Float
}